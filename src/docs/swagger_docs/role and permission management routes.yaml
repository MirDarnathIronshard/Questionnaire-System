openapi: 3.0.0
info:
  title: "Role and Permission Management API"
  description: "API endpoints for managing roles, permissions and user role assignments"
  version: "1.0.0"

paths:
  /api/roles:
    get:
      tags:
        - Roles
      summary: Get all roles
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of all roles
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /api/roles/{id}/permissions:
    get:
      tags:
        - Roles
      summary: Get role permissions
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Role ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of role permissions
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Permission'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/roles/users/{userId}:
    get:
      tags:
        - Roles
      summary: Get user roles
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of user roles
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    post:
      tags:
        - Roles
      summary: Assign role to user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role_id
              properties:
                role_id:
                  type: integer
                  example: 1
      responses:
        '200':
          description: Role assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/roles/users/{userId}/{roleId}:
    delete:
      tags:
        - Roles
      summary: Remove role from user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: User ID
        - name: roleId
          in: path
          required: true
          schema:
            type: integer
          description: Role ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Role removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/roles/validate:
    post:
      tags:
        - Roles
      summary: Validate user role
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - role
              properties:
                user_id:
                  type: integer
                  example: 1
                role:
                  type: string
                  example: "admin"
      responses:
        '200':
          description: Role validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      has_role:
                        type: boolean
                        example: true
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  schemas:
    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permission'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Permission:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        path:
          type: string
        method:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
          example: "Operation completed successfully"

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Unauthorized access"

    ForbiddenError:
      description: User does not have required permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Permission denied"

    ValidationError:
      description: Invalid input data
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Validation failed"
              errors:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                    message:
                      type: string

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Resource not found"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []