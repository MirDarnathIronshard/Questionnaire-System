openapi: 3.0.0
info:
  title: "Voting System API - Question Sequence Management"
  description: "API documentation for managing question sequences and responses in questionnaires"
  version: "1.0.0"

paths:
  /api/questionnaire-sequence/{id}/start:
    post:
      tags:
        - Question Sequence
      summary: Start a questionnaire sequence
      description: Initializes the question sequence for a user starting a questionnaire
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Questionnaire ID
      responses:
        '200':
          description: Sequence initialized successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SequenceResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Sequence already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/questionnaire-sequence/{id}/next:
    get:
      tags:
        - Question Sequence
      summary: Get next question in sequence
      description: Returns the next question in the user's questionnaire sequence
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Questionnaire ID
      responses:
        '200':
          description: Next question retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionResponse'
        '400':
          description: Invalid request or no more questions available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/questionnaire-sequence/{id}/current:
    get:
      tags:
        - Question Sequence
      summary: Get current question in sequence
      description: Returns the current question in the user's questionnaire sequence
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Questionnaire ID
      responses:
        '200':
          description: current question retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionResponse'
        '400':
          description: Invalid request or no more questions available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/questionnaire-sequence/{id}/previous:
    get:
      tags:
        - Question Sequence
      summary: Get previous question in sequence
      description: Returns the previous question if backtracking is allowed
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: Questionnaire ID
      responses:
        '200':
          description: Previous question retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionResponse'
        '400':
          description: Invalid request or backtracking not allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/questionnaire-sequence/response:
    post:
      tags:
        - Question Sequence
      summary: Submit response to current question
      description: Validates sequence and submits response for the current question
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitResponseRequest'
      responses:
        '200':
          description: Response submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseResponse'
        '400':
          description: Invalid sequence or question not current
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

components:
  schemas:
    SequenceResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        data:
          type: object
          properties:
            questionnaire_id:
              type: integer
              example: 1
            user_id:
              type: integer
              example: 1
            current_step:
              type: integer
              example: 0
            question_order:
              type: array
              items:
                type: integer
              example: [1, 3, 2, 4, 5]
            allow_backtrack:
              type: boolean
              example: true

    QuestionResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        data:
          type: object
          properties:
            id:
              type: integer
              example: 1
            text:
              type: string
              example: "What is your favorite color?"
            type:
              type: string
              enum: [MultipleChoice, ShortAnswer, Descriptive]
            options:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                  text:
                    type: string

    SubmitResponseRequest:
      type: object
      required:
        - questionnaire_id
        - question_id
        - answer
      properties:
        questionnaire_id:
          type: integer
          example: 1
        question_id:
          type: integer
          example: 1
        answer:
          type: string
          example: "Blue"

    ResponseResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        data:
          type: object
          properties:
            id:
              type: integer
            questionnaire_id:
              type: integer
            question_id:
              type: integer
            user_id:
              type: integer
            answer:
              type: string
            created_at:
              type: string
              format: date-time

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: "error"
        message:
          type: string
          example: "Error message describing what went wrong"

  responses:
    BadRequestError:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Unauthorized access"

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Resource not found"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []