openapi: 3.0.0
info:
  title: "Voting System API - Option Management"
  description: "API documentation for managing question options"
  version: "1.0.0"

paths:
  /api/options:
    post:
      tags:
        - Options
      summary: Create new option
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOptionRequest'
      responses:
        '201':
          description: Option created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptionResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/options/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Option ID

    get:
      tags:
        - Options
      summary: Get option by ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Option details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptionResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    put:
      tags:
        - Options
      summary: Update option
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOptionRequest'
      responses:
        '200':
          description: Option updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OptionResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

    delete:
      tags:
        - Options
      summary: Delete option
      security:
        - BearerAuth: []
      responses:
        '204':
          description: Option deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /api/options/question/{question_id}:
    get:
      tags:
        - Options
      summary: Get options by question ID
      security:
        - BearerAuth: []
      parameters:
        - name: question_id
          in: path
          required: true
          schema:
            type: integer
          description: Question ID
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number
        - name: page_size
          in: query
          schema:
            type: integer
            default: 10
          description: Items per page
      responses:
        '200':
          description: List of options
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOptionResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'

components:
  schemas:
    CreateOptionRequest:
      type: object
      required:
        - text
        - question_id
      properties:
        text:
          type: string
          example: "Option text"
          minLength: 1
          maxLength: 255
        question_id:
          type: integer
          example: 1
          description: ID of the parent question

    UpdateOptionRequest:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          example: "Updated option text"
          minLength: 1
          maxLength: 255

    Option:
      type: object
      properties:
        id:
          type: integer
          example: 1
        text:
          type: string
          example: "Option text"
        question_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    OptionResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        data:
          $ref: '#/components/schemas/Option'

    PaginatedOptionResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        data:
          type: array
          items:
            $ref: '#/components/schemas/Option'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        page_size:
          type: integer
          example: 10
        total:
          type: integer
          example: 50
        total_pages:
          type: integer
          example: 5

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Unauthorized access"

    ValidationError:
      description: Invalid input data
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Validation failed"
              errors:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                    message:
                      type: string

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Resource not found"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []